from json          import loads
from pytest        import mark
from urllib.parse  import unquote

from paddle_billing_python_sdk.Environment      import Environment
from paddle_billing_python_sdk.FiltersUndefined import FiltersUndefined

from paddle_billing_python_sdk.Entities.Product                       import Product
from paddle_billing_python_sdk.Entities.ProductWithIncludes           import ProductWithIncludes
from paddle_billing_python_sdk.Entities.Collections.ProductCollection import ProductCollection
from paddle_billing_python_sdk.Entities.Shared.CustomData             import CustomData
from paddle_billing_python_sdk.Entities.Shared.Status                 import Status
from paddle_billing_python_sdk.Entities.Shared.TaxCategory            import TaxCategory

from paddle_billing_python_sdk.Resources.Events.Operations.ListEvents      import ListEvents
from paddle_billing_python_sdk.Resources.Products.Operations.CreateProduct import CreateProduct
from paddle_billing_python_sdk.Resources.Products.Operations.ListProducts  import ListProducts
from paddle_billing_python_sdk.Resources.Products.Operations.UpdateProduct import UpdateProduct
from paddle_billing_python_sdk.Resources.Products.Operations.List.Includes import Includes
from paddle_billing_python_sdk.Resources.Shared.Operations.List.Pager      import Pager

from tests.Utils.TestClient   import mock_requests, test_client
from tests.Utils.ReadsFixture import ReadsFixtures


class TestProductsClient:
    @mark.parametrize(
        'operation, expected_request_body, expected_response_status, expected_response_body, expected_url',
        [
            (
                    CreateProduct(
                        name         = 'ChatApp Basic',
                        tax_category = TaxCategory.Standard,
                    ),
                    ReadsFixtures.read_raw_json_fixture('request/create_basic'),
                    200,
                    ReadsFixtures.read_raw_json_fixture('response/minimal_entity'),
                    f"{Environment.SANDBOX.base_url}/products",
            ), (
                    CreateProduct(
                        name         = 'ChatApp Full',
                        tax_category = TaxCategory.Standard,
                        description  = 'Spend more time engaging with students with ChataApp Education.',
                        image_url    = 'https://paddle-sandbox.s3.amazonaws.com/user/10889/2nmP8MQSret0aWeDemRw_icon1.png',
                        custom_data  = CustomData({
                            'features': {
                                'reports':        True,
                                'crm':            False,
                                'data_retention': True,
                            },
                        }),
                    ),
                    ReadsFixtures.read_raw_json_fixture('request/create_full'),
                    200,
                    ReadsFixtures.read_raw_json_fixture('response/full_entity'),
                    f"{Environment.SANDBOX.base_url}/products"
            ),
        ],
        ids = [
            "Create product with basic data",
            "Create product with full data",
        ],
    )
    def test_create_product_uses_expected_payload(
        self,
        test_client,
        mock_requests,
        operation,
        expected_request_body,
        expected_response_status,
        expected_response_body,
        expected_url
    ):
        mock_requests.post(
            url         = expected_url,
            status_code = expected_response_status,
            text        = expected_response_body
        )

        request_json = test_client.client.serialize_json_payload(
            FiltersUndefined.filter_undefined_values(operation.get_parameters())
        )

        response     = test_client.client.products.create(operation)
        last_request = mock_requests.last_request

        assert isinstance(response, Product)
        assert last_request is not None
        assert last_request.method       == 'POST'
        assert unquote(last_request.url) == expected_url, \
            "The URL does not match the expected URL, verify the Pagination query string is correct"
        assert loads(request_json)       == loads(expected_request_body), \
            "The request JSON generated by Client() doesn't match the expected fixture JSON"


    @mark.parametrize(
        'operation, expected_request_body, expected_response_status, expected_response_body, expected_url',
        [
            (
                    UpdateProduct(name='ChatApp Pro'),
                    ReadsFixtures.read_raw_json_fixture('request/update_single'),
                    200,
                    ReadsFixtures.read_raw_json_fixture('response/full_entity'),
                    f"{Environment.SANDBOX.base_url}/products/pro_01h7zcgmdc6tmwtjehp3sh7azf",
            ), (
                    UpdateProduct(name='ChatApp Pro', tax_category=TaxCategory.Saas),
                    ReadsFixtures.read_raw_json_fixture('request/update_partial'),
                    200,
                    ReadsFixtures.read_raw_json_fixture('response/full_entity'),
                    f"{Environment.SANDBOX.base_url}/products/pro_01h7zcgmdc6tmwtjehp3sh7azf",
            ), (
                    UpdateProduct(
                        name         = 'ChatApp Pro',
                        tax_category = TaxCategory.Saas,
                        description  = 'Spend more time engaging with students with ChatApp Pro.',
                        image_url    = 'https://paddle-sandbox.s3.amazonaws.com/pro.png',
                        custom_data  = CustomData({
                            'features': {
                                'reports':        True,
                                'crm':            True,
                                'data_retention': True,
                            },
                        }),
                    ),
                    ReadsFixtures.read_raw_json_fixture('request/update_full'),
                    200,
                    ReadsFixtures.read_raw_json_fixture('response/full_entity'),
                    f"{Environment.SANDBOX.base_url}/products/pro_01h7zcgmdc6tmwtjehp3sh7azf",
            ),
        ],
        ids = [
            "Update product with single new value",
            "Update product with partial new values",
            "Update product with completely new values",
        ],
    )
    def test_update_product_uses_expected_payload(
        self,
        test_client,
        mock_requests,
        operation,
        expected_request_body,
        expected_response_status,
        expected_response_body,
        expected_url
    ):
        mock_requests.patch(
            url         = expected_url,
            status_code = expected_response_status,
            text        = expected_response_body
        )

        request_json = test_client.client.serialize_json_payload(
            FiltersUndefined.filter_undefined_values(operation.get_parameters())
        )

        response     = test_client.client.products.update('pro_01h7zcgmdc6tmwtjehp3sh7azf', operation)
        last_request = mock_requests.last_request

        assert isinstance(response, Product)
        assert last_request is not None
        assert last_request.method       == 'PATCH'
        assert unquote(last_request.url) == expected_url, \
            "The URL does not match the expected URL, verify the Pagination query string is correct"
        assert loads(request_json)       == loads(expected_request_body), \
            "The request JSON generated by Client() doesn't match the expected fixture JSON"


    @mark.parametrize(
        'operation, expected_response_status, expected_url',
        [
            (
                    ListProducts(),
                    200,
                    f"{Environment.SANDBOX.base_url}/products",
            ),
            (
                    ListProducts(Pager()),
                    200,
                    f"{Environment.SANDBOX.base_url}/products?order_by=id[asc]&per_page=50",
            ),
            (
                    ListProducts(Pager(after='pro_01gsz4s0w61y0pp88528f1wvvb')),
                    200,
                    f"{Environment.SANDBOX.base_url}/products?after=pro_01gsz4s0w61y0pp88528f1wvvb&order_by=id[asc]&per_page=50",
            ),
            (
                    ListProducts(statuses=[Status.Archived]),
                    200,
                    f"{Environment.SANDBOX.base_url}/products?status=archived",
            ),
            (
                    ListProducts(ids=['pro_01gsz4s0w61y0pp88528f1wvvb']),
                    200,
                    f"{Environment.SANDBOX.base_url}/products?id=pro_01gsz4s0w61y0pp88528f1wvvb",
            ),
            (
                    ListProducts(ids=['pro_01gsz4s0w61y0pp88528f1wvvb', 'pro_01h1vjes1y163xfj1rh1tkfb65']),
                    200,
                    f"{Environment.SANDBOX.base_url}/products?id=pro_01gsz4s0w61y0pp88528f1wvvb,pro_01h1vjes1y163xfj1rh1tkfb65",
            ),
            (
                    ListProducts(tax_categories=[TaxCategory.DigitalGoods, TaxCategory.Standard]),
                    200,
                    f"{Environment.SANDBOX.base_url}/products?tax_category=digital-goods,standard",
            ),
            (
                    ListProducts(includes=[Includes.Prices]),
                    200,
                    f"{Environment.SANDBOX.base_url}/products?include=prices",
            ),
        ],
        ids = [
            "List products without pagination",
            "List products with default pagination",
            "List products with after pagination",
            "List products filtered by status",
            "List products filtered by id",
            "List products filtered by multiple ids",
            "List products filtered by tax categories",
            "List products with includes",
        ],
    )
    def test_list_products_hits_expected_uri(
        self,
        test_client,
        mock_requests,
        operation,
        expected_response_status,
        expected_url
    ):
        mock_requests.get(
            url         = expected_url,
            status_code = expected_response_status,
        )

        response     = test_client.client.products.list(operation)
        last_request = mock_requests.last_request

        # assert isinstance(response, ProductCollection)
        assert last_request is not None
        assert last_request.method       == 'GET'
        assert unquote(last_request.url) == expected_url, \
            "The URL does not match the expected URL, verify the Pagination query string is correct"
